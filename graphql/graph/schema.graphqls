# GraphQL schema example
#
# https://gqlgen.com/getting-started/
directive @goField(
  forceResolver: Boolean
  name: String
) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

# new directive
directive @auth on FIELD_DEFINITION

scalar Any
scalar Time
scalar Date

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  phone: String!
  gender: String!
  dob: Date!
  image: String!
  role: String!
  balance: Int!
  enable2FA: Boolean!
  isSuspended: Boolean!
  unsuspendReq: Boolean!
  shop: Shop! @goField(forceResolver: true)
  carts: [Cart!]! @goField(forceResolver: true)
  transactions: [TransactionHeader!]! @goField(forceResolver: true)
  wishlist: [Wishlist!]! @goField(forceResolver: true)
  addresses: [Address!]! @goField(forceResolver: true)
}

input NewUser {
  name: String!
  email: String!
  password: String!
}

input UpdateUser {
  name: String!
  dob: String!
  gender: String!
  phone: String!
  image: String!
}

input NewShop {
  name: String!
  slug: String!
  phone: String!
  city: String!
  postalCode: String!
  address: String!
}

input UpdateShop {
  image: String!
  name: String!
  slug: String!
  slogan: String!
  isOpen: Boolean!
  description: String!
  openTime: Time!
  closeTime: Time!
}

type Shop {
  id: ID!
  name: String!
  slug: String!
  phone: String!
  slogan: String!
  description: String!
  image: String!
  openTime: Time!
  closeTime: Time!
  isOpen: Boolean!
  reputationPoint: Int!
  promotionalVid: String!
  user: User! @goField(forceResolver: true)
  products: [Product!]! @goField(forceResolver: true)
  promos: [ShopPromo!]! @goField(forceResolver: true)
  vouchers: [Voucher!]! @goField(forceResolver: true)
  city: String!
  postalCode: String!
  address: String!
}

type ShopPromo {
  id: ID!
  name: String!
  image: String!
  shop: Shop! @goField(forceResolver: true)
}

type Product {
  id: ID!
  originalId: String!
  name: String!
  images: [ProductImage!]! @goField(forceResolver: true)
  description: String!
  price: Int!
  stock: Int!
  rating: Float!
  discount: Int!
  sold: Int!
  metadata: [ProductMetadata] @goField(forceResolver: true)
  createdAt: Time!
  category: Category! @goField(forceResolver: true)
  shop: Shop! @goField(forceResolver: true)
}

type ProductMetadata {
  id: ID!
  label: String!
  value: String!
  product: Product! @goField(forceResolver: true)
}

input NewProduct {
  name: String!
  description: String!
  images: [String!]!
  price: Int!
  stock: Int!
  discount: Int!
  categoryId: String!
  label: String!
  value: String!
}

type Voucher {
  id: ID!
  name: String!
  description: String!
  discountRate: Int!
  condition: String!
  startDate: Time!
  endDate: Time!
  global: Boolean!
  shop: Shop @goField(forceResolver: true)
}

input NewVoucher {
  name: String!
  description: String!
  discountRate: Int!
  condition: String!
  startDate: Time!
  endDate: Time!
  global: Boolean!
  shopID: String
}

type Category {
  id: ID!
  name: String!
  products: [Product!]! @goField(forceResolver: true)
}

type Address {
  id: ID!
  label: String!
  receiver: String!
  phone: String!
  city: String!
  postalCode: String!
  address: String!
  isMain: Boolean!
  isValid: Boolean!
  user: User! @goField(forceResolver: true)
}

input NewAddress {
  label: String!
  receiver: String!
  phone: String!
  city: String!
  postalCode: String!
  address: String!
  isMain: Boolean!
}

input UpdateAddress {
  label: String!
  receiver: String!
  phone: String!
  city: String!
  postalCode: String!
  address: String!
}

type Cart {
  id: ID!
  product: Product! @goField(forceResolver: true)
  user: User! @goField(forceResolver: true)
  quantity: Int!
  checked: Boolean!
  note: String
}

type Wishlist {
  id: ID!
  product: Product! @goField(forceResolver: true)
  user: User! @goField(forceResolver: true)
}

input NewCart {
  productId: String!
  quantity: Int!
  note: String
}

type ProductImage {
  id: ID!
  product: Product! @goField(forceResolver: true)
  image: String!
}

type Courier {
  id: ID!
  name: String!
  shippings: [Shipping!]! @goField(forceResolver: true)
}

type Shipping {
  id: ID!
  label: String!
  price: Int!
  duration: Int!
  lateProb: Int!
  courier: Courier! @goField(forceResolver: true)
}

input NewShipping {
  label: String!
  price: Int!
  duration: Int!
  lateProb: Int!
  courierId: String!
}

type TransactionHeader {
  id: ID!
  user: User!
  chosenAddressId: String!
  courierId: String!
  shippingId: String!
  voucherId: String
  transactionDetail: [TransactionDetail!]! @goField(forceResolver: true)
}

type TransactionDetail {
  id: ID!
  TransactionHeader: TransactionHeader! @goField(forceResolver: true)
  productId: String!
  quantity: Int!
}

input NewTransaction {
  chosenAddressId: String!
  courierId: String!
  shippingId: String!
  voucherId: String
  productIds: [String!]!
  qtys: [Int!]!
}

type DataMap {
  count: Int!
  additional: Int
  name: String!
}
extend type Query {
  productPerCategory: [DataMap!]!
  transactionPerCourier: [DataMap!]!
  suspendedUser: [DataMap!]!
}

type AuthOps {
  login(email: String!, password: String!): Any! @goField(forceResolver: true)
  register(input: NewUser!): Any! @goField(forceResolver: true)
}

type Query {
  user(id: String!): User! @goField(forceResolver: true)
  userByEmail(email: String!): User! @goField(forceResolver: true)
  product(id: ID!): Product! @goField(forceResolver: true)
  users: [User!]! @goField(forceResolver: true)
  categories: [Category!]! @goField(forceResolver: true)
  addresses: [Address!]! @goField(forceResolver: true)
  carts: [Cart!]! @goField(forceResolver: true) @auth
  couriers: [Courier!]! @goField(forceResolver: true)
  allProducts: [Product!]! @goField(forceResolver: true)
  products(limit: Int!, offset: Int!): [Product!]! @goField(forceResolver: true)
  searchProduct(
    limit: Int
    offset: Int
    key: String!
    sortBy: Int
    filterBy: String
  ): [Product!]! @goField(forceResolver: true)
  searchShop(key: String!): Shop! @goField(forceResolver: true)
  productsPaginate(limit: Int!, offset: Int!, shopID: String!): [Product!]!
    @goField(forceResolver: true)
  usersPaginate(limit: Int!, offset: Int!): [User!]!
    @goField(forceResolver: true)
  shopBySlug(slug: String!): Shop! @goField(forceResolver: true)
  getCurrentUser: User! @goField(forceResolver: true) @auth
  getCurrentShop: Shop! @goField(forceResolver: true) @auth
  checkWishlist(productId: String!): Wishlist!
    @goField(forceResolver: true)
    @auth
  wishlists: [Wishlist!]! @goField(forceResolver: true) @auth
  vouchers: [Voucher!]!
  globalVouchers: [Voucher!]!
  shopVouchers(shopId: String!): [Voucher!]! @goField(forceResolver: true) @auth
  # Add Protected Resource
  protected: String! @goField(forceResolver: true) @auth
}

type Mutation {
  auth: AuthOps! @goField(forceResolver: true)
  openShop(input: NewShop!): Shop! @auth
  updateShop(input: UpdateShop!): Shop! @auth
  updateUser(input: UpdateUser!): User! @auth
  updateEmail(email: String!): User! @auth
  createCategory(name: String!): Category!
  addAddress(input: NewAddress!): Address! @auth
  deleteAddress(id: String!): Address! @auth
  updateAddress(input: UpdateAddress!, id: String!): Address! @auth
  setMainAddress(id: String!): Address! @auth
  addProduct(input: NewProduct!): Product! @auth
  addToCart(input: NewCart!): Cart! @auth
  updateCartQty(id: String!, qty: Int!): Cart! @auth
  checkCart(id: String!, check: Boolean!): Cart! @auth
  deleteCart(id: String!): Cart! @auth
  addToWishlist(productId: String!): Wishlist! @auth
  removeFromWishlist(productId: String!): Wishlist @auth
  addVoucher(input: NewVoucher!): Voucher! @auth
  suspendUser(userId: String!): User! @auth
  enable2FA(enabled: Boolean!): User! @auth
  requestUnsuspend(userId: String!): User!
  resetPassword(userId: String!, newPassword: String!): User!
  topup(nominal: Int!): User! @auth
  createCourier(name: String!): Courier!
  createShipping(input: NewShipping!): Shipping!
  createTransaction(
    input: NewTransaction!
    totalPrice: Int!
  ): TransactionHeader! @auth
}
